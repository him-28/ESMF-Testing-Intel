#!/bin/bash -l
source /usr/share/Modules/init/sh

cd /project/esmf/himanshu/ESMF-Testing-Intel

rm -rf LOGDIR
mkdir LOGDIR

rm -rf esmf
git clone https://github.com/esmf-org/esmf.git

module purge
module load compiler/intel/20.0.1
module load tool/hdf5/1.12.0/intel/20.0.1
module load tool/netcdf/4.7.4/intel/20.0.1
module load mpi/2.3.3/intel/20.0.1
module list
which nc-config
export ver=$(icc -dumpversion)
export ROOTDIR=`pwd`

cd $ROOTDIR/esmf
unset $(compgen -v ESMF_)

export ESMF_DIR=`pwd`
export ESMF_NETCDF=nc-config

export ESMF_COMPILER=intel

export ESMF_COMM=mvapich2
export ESMF_MPIRUN=mpirun
export ESMF_TESTEXHAUSTIVE=ON
export ESMF_ABI=64
export ESMF_OS=`uname -s`
export ESMF_SITE=default
export ESMF_TESTWITHTHREADS=ON

export homedir=$ROOTDIR/test_scripts/manual_testing
export LOGDIR=$ROOTDIR/LOGDIR

export ESMF_BOPT=g
$homedir/test_esmf_local
$homedir/summarize

cd /project/esmf/himanshu/storage/develop
x="${ESMF_OS}_${ESMF_COMPILER}_${ESMF_COMM}"
mkdir testg_$x
mkdir examplesg_$x
mkdir libg_$x
mkdir appsg_$x
mkdir g_outputfiles

cp -rf $ESMF_DIR/test/testg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.Log testg_$x/
cp -rf $ESMF_DIR/test/testg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.stdout testg_$x/
cp -rf $ESMF_DIR/test/testg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*_results testg_$x/
cp -rf $ESMF_DIR/test/testg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.config testg_$x/
cp -rf $ESMF_DIR/examples/examplesg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.Log examplesg_$x/
cp -rf $ESMF_DIR/examples/examplesg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*_results examplesg_$x/
cp -rf $ESMF_DIR/examples/examplesg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.config examplesg_$x/
cp -rf $ESMF_DIR/examples/examplesg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.stdout examplesg_$x/
cp -rf $ESMF_DIR/lib/libg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/esmf.mk libg_$x/
cp -rf $ESMF_DIR/apps/appsg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.Log appsg_$x/
cp -rf $ESMF_DIR/apps/appsg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.stdout appsg_$x/

for f in *.out; do mv "$f" "${f%.out}_g.out"; done
mv *_g.out g_outputfiles/

cd $ROOTDIR

export ESMF_BOPT=O
$homedir/test_esmf_local
$homedir/summarize

cd /project/esmf/himanshu/storage/develop
mkdir testO_$x
mkdir examplesO_$x
mkdir libO_$ESMF_OS_$x
mkdir appsO_$ESMF_OS_$x
mkdir O_outputfiles

cp -rf $ESMF_DIR/test/testO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.stdout testO_$x/
cp -rf $ESMF_DIR/test/testO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*_results testO_$x/
cp -rf $ESMF_DIR/test/testO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.config testO_$x/
cp -rf $ESMF_DIR/examples/examplesO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.stdout examplesO_$x/
cp -rf $ESMF_DIR/examples/examplesO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*_results examplesO_$x/
cp -rf $ESMF_DIR/examples/examplesO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.config examplesO_$x/
cp -rf $ESMF_DIR/lib/libO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/esmf.mk libO_$x/
cp -rf $ESMF_DIR/apps/appsO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.stdout appsO_$x/
cp -rf $ESMF_DIR/test/testO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.Log testO_$x/
cp -rf $ESMF_DIR/examples/examplesO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.Log examplesO_$x/
cp -rf $ESMF_DIR/apps/appsO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.Log appsO_$x/

for h in *.out; do mv "$h" "${h%.out}_O.out"; done
mv *_O.out O_outputfiles/

cd $ROOTDIR

module purge
module load compiler/intel/20.0.1
module load tool/hdf5/1.12.0/intel/20.0.1
module load tool/netcdf/4.7.4/intel/20.0.1
module unload mpi/2.3.3/intel/20.0.1
module load openmpi/4.0.3/intel/20.0.1
module list

export ESMF_F90LINKOPTS="-lnl-3 -lfabric"
export ESMF_CXXLINKOPTS="-lnl-3 -lfabric"
export ESMF_COMM=openmpi
export ESMF_MPIRUN=mpirun

export ESMF_BOPT=g
$homedir/test_esmf_local
$homedir/summarize

cd /project/esmf/himanshu/storage/develop
x="${ESMF_OS}_${ESMF_COMPILER}_${ESMF_COMM}"
mkdir testg_$x
mkdir examplesg_$x
mkdir libg_$x
mkdir appsg_$x
mkdir g_outputfiles

cp -rf $ESMF_DIR/test/testg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.Log testg_$x/
cp -rf $ESMF_DIR/test/testg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.stdout testg_$x/
cp -rf $ESMF_DIR/test/testg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*_results testg_$x/
cp -rf $ESMF_DIR/test/testg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.config testg_$x/
cp -rf $ESMF_DIR/examples/examplesg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.Log examplesg_$x/
cp -rf $ESMF_DIR/examples/examplesg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*_results examplesg_$x/
cp -rf $ESMF_DIR/examples/examplesg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.config examplesg_$x/
cp -rf $ESMF_DIR/examples/examplesg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.stdout examplesg_$x/
cp -rf $ESMF_DIR/lib/libg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/esmf.mk libg_$x/
cp -rf $ESMF_DIR/apps/appsg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.Log appsg_$x/
cp -rf $ESMF_DIR/apps/appsg/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.stdout appsg_$x/

for f in *.out; do mv "$f" "${f%.out}_g.out"; done
mv *_g.out g_outputfiles/

cd $ROOTDIR

export ESMF_BOPT=O
$homedir/test_esmf_local
$homedir/summarize

cd /project/esmf/himanshu/storage/develop
mkdir testO_$x
mkdir examplesO_$x
mkdir libO_$ESMF_OS_$x
mkdir appsO_$ESMF_OS_$x
mkdir O_outputfiles

cp -rf $ESMF_DIR/test/testO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.stdout testO_$x/
cp -rf $ESMF_DIR/test/testO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*_results testO_$x/
cp -rf $ESMF_DIR/test/testO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.config testO_$x/
cp -rf $ESMF_DIR/examples/examplesO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.stdout examplesO_$x/
cp -rf $ESMF_DIR/examples/examplesO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*_results examplesO_$x/
cp -rf $ESMF_DIR/examples/examplesO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.config examplesO_$x/
cp -rf $ESMF_DIR/lib/libO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/esmf.mk libO_$x/
cp -rf $ESMF_DIR/apps/appsO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.stdout appsO_$x/
cp -rf $ESMF_DIR/test/testO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.Log testO_$x/
cp -rf $ESMF_DIR/examples/examplesO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.Log examplesO_$x/
cp -rf $ESMF_DIR/apps/appsO/$ESMF_OS.$ESMF_COMPILER.64.$ESMF_COMM.default/*.Log appsO_$x/

for h in *.out; do mv "$h" "${h%.out}_O.out"; done
mv *_O.out O_outputfiles/

cd $ROOTDIR

mail -s "ESMF_Trunk_Izumi_intel" himanshu@ucar.edu esmf_test@cgd.ucar.edu < $LOGDIR/newMailMessage

check=`date +%A`
echo $check


cd /project/esmf/himanshu/esmf-org.github.io/
git pull
cp $LOGDIR/newMailMessage /project/esmf/himanshu/esmf-org.github.io/trunk_result/$check/ESMF_Trunk_Izumi_intel.html
sed -i '1i<pre>' /project/esmf/himanshu/esmf-org.github.io/trunk_result/$check/ESMF_Trunk_Izumi_intel.html
git add .
git commit -m " Izumi Intel result pushed at `date`"
git push origin master

